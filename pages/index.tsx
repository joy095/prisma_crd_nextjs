import Head from "next/head";
import { useState } from "react";
import { prisma } from "../lib/prisma";
import { GetServerSideProps } from "next";
import { useRouter } from "next/router";

interface Cruds {
  cruds: {
    id: string;
    title: string;
    content: string;
  }[];
}

interface FormDate {
  title: string;
  content: string;
  id: string;
}

export default function Home({ cruds }: Cruds) {
  const [form, setForm] = useState<FormDate>({
    title: "",
    content: "",
    id: "",
  });
  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath);
  };
  async function create(data: FormDate) {
    try {
      fetch("http://localhost:3000/api/create", {
        body: JSON.stringify(data),
        headers: {
          "Content-Type": "application/json",
        },
        method: "POST",
      }).then(() => {
        if (data.id) {
          deleteCrud(data.id);
          setForm({ title: "", content: "", id: "" });
          refreshData();
        } else {
          setForm({ title: "", content: "", id: "" });
          refreshData();
        }
      });
    } catch (error) {
      console.log(error);
    }
  }

  async function deleteCrud(id: string) {
    try {
      fetch(`http://localhost:3000/api/crud/${id}`, {
        headers: {
          "Content-Type": "application/json",
        },
        method: "DELETE",
      }).then(() => {
        refreshData();
      });
    } catch (error) {
      console.log(error);
    }
  }

  const handleSubmit = async (data: FormDate) => {
    try {
      create(data);
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="text-center font-bold text-2xl mt-4 mx-auto">Notes</h1>
        <form
          onSubmit={(e) => {
            e.preventDefault();
            handleSubmit(form);
          }}
          className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
        >
          <input
            type="text"
            value={form.title}
            placeholder="Title"
            onChange={(e) => setForm({ ...form, title: e.target.value })}
            className="border-2 rounded border-gray-600 p-1"
          />
          <textarea
            value={form.content}
            onChange={(e) => setForm({ ...form, content: e.target.value })}
            className="border-2 rounded bordre-gray-600 p-1"
          />
          <button type="submit" className="bg-blue-500 text-white rounded p-1">
            Add +
          </button>
        </form>
        <div className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch">
          <ul>
            {cruds.map((crud) => (
              <li key={crud.id} className="border-b border-gray-600 p-2">
                <div className="flex justify-between">
                  <div className="flex-1">
                    <h3 className="font-bold">{crud.title}</h3>
                    <p className="font-sm">{crud.content}</p>
                  </div>
                  <div className="flex flex-row gap-3">
                    <button
                      onClick={() =>
                        setForm({
                          title: crud.title,
                          content: crud.content,
                          id: crud.id,
                        })
                      }
                      className="bg-blue-500 px-3 rounded text-white"
                    >
                      Update
                    </button>
                    <button
                      onClick={() => deleteCrud(crud.id)}
                      className="bg-red-500 px-3 rounded text-white"
                    >
                      x
                    </button>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const cruds = await prisma.crud.findMany({
    select: {
      title: true,
      id: true,
      content: true,
    },
  });

  return {
    props: {
      cruds,
    },
  };
};
